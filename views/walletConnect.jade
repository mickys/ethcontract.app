script. 
    init = () => {
        const Web3Modal = window.Web3Modal.default;
        const WalletConnectProvider = window.WalletConnectProvider.default;
        const Fortmatic = window.Fortmatic;
        const evmChains = window.evmChains;

        let web3Modal;
        let provider;
        let selectedAccount;

        console.log("Initializing example");
        console.log("WalletConnectProvider is", WalletConnectProvider);
        //- console.log("Fortmatic is", Fortmatic);
        console.log("window.web3 is", window.web3, "window.ethereum is", window.ethereum);

        //- if (location.protocol !== 'https:') {
        //-     const alert = $("#alert-error-https");
        //-     alert.show();
        //-     $("#btn-connect").attr("disabled", "disabled");
        //-     return;
        //- }

        const providerOptions = {
            walletconnect: {
                package: WalletConnectProvider,
                options: {
                    infuraId: "8043bb2cf99347b1bfadfb233c5325c0"
                }   
            },
            //- fortmatic: {
            //-     package: Fortmatic,
            //-     options: {
            //-         key: "pk_test_391E26A3B43A3350"
            //-     }
            //- }
        };

        web3Modal = new Web3Modal({
            cacheProvider: false,
            providerOptions,
            disableInjectedProvider: true,
        });

        console.log("Web3Modal instance is", web3Modal);

        $("#btn-connect").click(() => {
            web3Modal.show()
            .then((provider) => {
                console.log("Provider is", provider);
                $("#prepare").hide();
                $("#connected").show();
                fetchAccountData();
            })
            .catch(console.error);
        });

        $("#btn-disconnect").click(() => {
            provider.disconnect();
            $("#connected").hide();
            $("#prepare").show();
        });
    };

    fetchAccountData = async () => {
        const web3 = new Web3(provider);

        console.log("Web3 instance is", web3);

        const chainId = await web3.eth.getChainId();
        const chainData = evmChains.getChain(chainId);
        $("#network-name").text(chainData.name);

        const accounts = await web3.eth.getAccounts();

        console.log("Got accounts", accounts);
        selectedAccount = accounts[0];

        $("#selected-account").text(selectedAccount);

        const template = $("#template-balance");
        const accountContainer = $("#accounts");

        accountContainer.innerHTML = "";

        const rowResolvers = accounts.map(async (address) => {
            const balance = await web3.eth.getBalance(address);
            const ethBalance = web3.utils.fromWei(balance, "ether");
            const humanFriendlyBalance = parseFloat(ethBalance).toFixed(4);
            const clone = template.content.cloneNode(true);
            clone.querySelector(".address").textContent = address;
            clone.querySelector(".balance").textContent = humanFriendlyBalance;
            accountContainer.append(clone);
        });



        await Promise.all(rowResolvers);
    };

    $(function() {
        init();
    });

#prepare
    button.btn.btn-primary(id='btn-connect')
        | Connect wallet

#connected(style='display: none')
    button.btn.btn-primary(id='btn-disconnect')
        | Disconnect wallet

hr

#network
    p
        strong Connected blockchain:
        span#network-name

    p
        strong Selected account:
        span#selected-account

hr





