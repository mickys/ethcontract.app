script.
    let provider,signer, contract;
    let network =  '#{network}';

    async function connectMetaMask() {
        try {

            if(typeof window.ethereum === "undefined"){
                $('#installMM').show();
            } else {
                const response = await window.ethereum.request({method: 'eth_requestAccounts'})
                console.log(response);
                $('#connectButton span').text('Wallet Connected');
                $('#connectIcon').removeClass('bi-circle').addClass('bi-circle-fill');
                provider = new ethers.providers.Web3Provider(window.ethereum);
                signer = provider.getSigner();
                contract = new ethers.Contract("#{address}", !{JSON.stringify(abiJson)}, signer);
                checkNetwork();
            }
        } catch(e) {
            console.log(error);

        }

    };


    async function checkNetwork() {
        try {
        const { chainId, name } = await provider.getNetwork()
        $.getJSON("/javascripts/constants.json", async(data) => {
            console.log(data)
            if(name !== network && data[network]) {
                $("#network").show();
                $("#switch-btn").show();
            } else if (name !== network) {
                $("#network").show();
                $("#switch-btn").hide();
            } else {
                $("#network").hide();
                $("#switch-btn").hide();
            }
        });
        } catch(e){
        }
    }

    async function addNetwork() {
        $.getJSON("/javascripts/constants.json", async(data) => {
        console.log(network)
        let params;
        if(data[network]) {
            params = data[network];
            try {
                await ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: params.chainId }],
                });
            } catch (addError) {
                await ethereum.request({
                    method: 'wallet_addEthereumChain',
                    params: [params]
                });
                window.location.reload();
            }
        }
        });
    }

    $(async function(){
        if (network === 'mainnet') {
        network = 'homestead';
        } else if (network === 'polygon') {
        network = 'matic';
        }
        $("#network").hide();
        $("#switch-btn").hide();
        if(window.ethereum){

            $('#installMM').hide();
            const response = await window.ethereum.request({method: 'eth_accounts'})
            console.log(response);
            if(response.length > 0) {

                $('#connectButton span').text('Wallet Connected');
                $('#connectIcon').removeClass('bi-circle').addClass('bi-circle-fill');
                provider = new ethers.providers.Web3Provider(window.ethereum);
                signer = provider.getSigner();
                contract = new ethers.Contract("#{address}", !{JSON.stringify(abiJson)}, signer);
                checkNetwork();
            }

            window.ethereum.on('accountsChanged', () => {
                window.location.reload();
            });

            window.ethereum.on('chainChanged', () => {
                window.location.reload();
            });

            window.ethereum.on('disconnect', () => {
                window.location.reload();
            });
        }

    });

nav.navbar.navbar-dark.p-4(style="background-color:transparent;")
    .container-fluid.d-flex.justify-content-end
        div
            button.btn.btn-warning.btn-lg(onclick="addNetwork()" class="switch-btn" id="switch-btn") Connect to #{network} network
            button.btn.btn-light.btn-lg.ms-2(id="connectButton" onclick="connectMetaMask()")
                i.bi.bi-circle.me-2(id="connectIcon")
                span Connect Wallet
.container.mt-5.text-center(id="installMM")
    .alert.alert-info Please install 
        a.btn-link(href="https://metamask.io" target="_blank") Metamask

